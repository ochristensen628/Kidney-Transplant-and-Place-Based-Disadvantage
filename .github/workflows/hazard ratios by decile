
##ADI death/deterioration hazard ratio by decile
```{r}
# Generate new data for prediction
df_cand_kipa_w_scores$ADI_decile_num <- as.numeric(df_cand_kipa_w_scores$ADI_decile)

library(rms)

# Ensure the datadist is set up for the model
dd <- datadist(df_cand_kipa_w_scores)
options(datadist = "dd")

# Fit the Cox model with restricted cubic splines
model <- cph(Surv(time, death_outcome) ~ rcs(ADI_decile_num, 4), data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)


new_data <- data.frame(ADI_decile_num = seq(min(df_cand_kipa_w_scores$ADI_decile_num, na.rm = TRUE),
                                            max(df_cand_kipa_w_scores$ADI_decile_num, na.rm = TRUE),
                                            length.out = 100))
# Predict the linear predictor
lp <- predict(model, newdata = new_data, type = "lp")

# Predict survival probabilities using the model's survival function
hr <- exp(lp)

# Create the data frame for plotting
plot_data <- data.frame(
  ADI_decile_num = new_data$ADI_decile_num,
  Hazard_Ratio = hr
)

library(ggplot2)

ggplot(plot_data, aes(x = ADI_decile_num, y = Hazard_Ratio)) +
  geom_line() +
  labs(title = "Hazard Ratio by ADI Decile",
       x = "ADI Decile Number",
       y = "Hazard Ratio for Death / Deterioration") +
  theme_minimal()
```

##set reference to ADI_decile = 5
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)

# Convert decile column to numeric
df_cand_kipa_w_scores$ADI_decile_num <- as.numeric(df_cand_kipa_w_scores$ADI_decile)

# Ensure the datadist is set up for the model
dd <- datadist(df_cand_kipa_w_scores)
options(datadist = "dd")

# Fit the Cox model with restricted cubic splines
model <- cph(Surv(time, death_outcome) ~ rcs(ADI_decile_num, 4), data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)

# Generate new data for prediction
new_data <- data.frame(ADI_decile_num = seq(min(df_cand_kipa_w_scores$ADI_decile_num, na.rm = TRUE),
                                            max(df_cand_kipa_w_scores$ADI_decile_num, na.rm = TRUE),
                                            length.out = 100))

# Predict the linear predictor
lp <- predict(model, newdata = new_data, type = "lp")

# Predict hazard ratios
hr <- exp(lp)

# Find the hazard ratio at the reference value (e.g., decile = 5)
reference_value <- 5
reference_hr <- hr[new_data$ADI_decile_num == reference_value]

# Adjust hazard ratios so that the reference value has an HR of 1
hr_adjusted <- hr / reference_hr

# Create the data frame for plotting
plot_data <- data.frame(
  ADI_decile_num = new_data$ADI_decile_num,
  Hazard_Ratio = hr_adjusted
)

# Plot
ggplot(plot_data, aes(x = ADI_decile_num, y = Hazard_Ratio)) +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  labs(title = "Hazard Ratio by ADI Decile",
       x = "ADI Decile Number",
       y = "Hazard Ratio for Death/Deterioration (Reference = 5)") +
  theme_minimal()

```
##ADI transplant hazard ratio by decile
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)

# Convert decile column to numeric
df_cand_kipa_w_scores$ADI_decile_num <- as.numeric(df_cand_kipa_w_scores$ADI_decile)

# Ensure the datadist is set up for the model
dd <- datadist(df_cand_kipa_w_scores)
options(datadist = "dd")

# Fit the Cox model with restricted cubic splines
model <- cph(Surv(time, transplant_outcome) ~ rcs(ADI_decile_num, 4), data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)

# Generate new data for prediction
new_data <- data.frame(ADI_decile_num = seq(min(df_cand_kipa_w_scores$ADI_decile_num, na.rm = TRUE),
                                            max(df_cand_kipa_w_scores$ADI_decile_num, na.rm = TRUE),
                                            length.out = 100))

# Predict the linear predictor
lp <- predict(model, newdata = new_data, type = "lp")

# Predict hazard ratios
hr <- exp(lp)

# Find the hazard ratio at the reference value (e.g., decile = 5)
reference_value <- 5
reference_hr <- hr[new_data$ADI_decile_num == reference_value]

# Adjust hazard ratios so that the reference value has an HR of 1
hr_adjusted <- hr / reference_hr

# Create the data frame for plotting
plot_data <- data.frame(
  ADI_decile_num = new_data$ADI_decile_num,
  Hazard_Ratio = hr_adjusted
)

# Plot
ggplot(plot_data, aes(x = ADI_decile_num, y = Hazard_Ratio)) +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  labs(title = "Hazard Ratio by ADI Decile",
       x = "ADI Decile Number",
       y = "Hazard Ratio for Transplant (Reference = 5)") +
  theme_minimal()

```
##SVM death/deterioration hazard ratio by decile
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)

# Convert decile column to numeric
df_cand_kipa_w_scores$SVM_decile_num <- as.numeric(df_cand_kipa_w_scores$SVM_decile)

# Ensure the datadist is set up for the model
dd <- datadist(df_cand_kipa_w_scores)
options(datadist = "dd")

# Fit the Cox model with restricted cubic splines
model <- cph(Surv(time, death_outcome) ~ rcs(SVM_decile_num, 4), data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)

# Generate new data for prediction
new_data <- data.frame(SVM_decile_num = seq(min(df_cand_kipa_w_scores$SVM_decile_num, na.rm = TRUE),
                                            max(df_cand_kipa_w_scores$SVM_decile_num, na.rm = TRUE),
                                            length.out = 100))

# Predict the linear predictor
lp <- predict(model, newdata = new_data, type = "lp")

# Predict hazard ratios
hr <- exp(lp)

# Find the hazard ratio at the reference value (e.g., decile = 5)
reference_value <- 5
reference_hr <- hr[new_data$SVM_decile_num == reference_value]

# Adjust hazard ratios so that the reference value has an HR of 1
hr_adjusted <- hr / reference_hr

# Create the data frame for plotting
plot_data <- data.frame(
  SVM_decile_num = new_data$SVM_decile_num,
  Hazard_Ratio = hr_adjusted
)

# Plot
ggplot(plot_data, aes(x = SVM_decile_num, y = Hazard_Ratio)) +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  labs(title = "Hazard Ratio by SVM Decile",
       x = "SVM Decile Number",
       y = "Hazard Ratio of Death/Deterioration (Reference = 5)") +
  theme_minimal()
```
##SVM transplant hazard ratio by decile
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)

# Convert decile column to numeric
df_cand_kipa_w_scores$SVM_decile_num <- as.numeric(df_cand_kipa_w_scores$SVM_decile)

# Ensure the datadist is set up for the model
dd <- datadist(df_cand_kipa_w_scores)
options(datadist = "dd")

# Fit the Cox model with restricted cubic splines
model <- cph(Surv(time, transplant_outcome) ~ rcs(SVM_decile_num, 4), data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)

# Generate new data for prediction
new_data <- data.frame(SVM_decile_num = seq(min(df_cand_kipa_w_scores$SVM_decile_num, na.rm = TRUE),
                                            max(df_cand_kipa_w_scores$SVM_decile_num, na.rm = TRUE),
                                            length.out = 100))

# Predict the linear predictor
lp <- predict(model, newdata = new_data, type = "lp")

# Predict hazard ratios
hr <- exp(lp)

# Find the hazard ratio at the reference value (e.g., decile = 5)
reference_value <- 5
reference_hr <- hr[new_data$SVM_decile_num == reference_value]

# Adjust hazard ratios so that the reference value has an HR of 1
hr_adjusted <- hr / reference_hr

# Create the data frame for plotting
plot_data <- data.frame(
  SVM_decile_num = new_data$SVM_decile_num,
  Hazard_Ratio = hr_adjusted
)

# Plot
ggplot(plot_data, aes(x = SVM_decile_num, y = Hazard_Ratio)) +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  labs(title = "Hazard Ratio by SVM Decile",
       x = "SVM Decile Number",
       y = "Hazard Ratio of Transplant (Reference = 5)") +
  theme_minimal()
```
##SVI death/deterioration hazard ratio by decile
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)

# Convert decile column to numeric
df_cand_kipa_w_scores$SVI_decile_num <- as.numeric(df_cand_kipa_w_scores$SVI_decile)

# Ensure the datadist is set up for the model
dd <- datadist(df_cand_kipa_w_scores)
options(datadist = "dd")

# Fit the Cox model with restricted cubic splines
model <- cph(Surv(time, death_outcome) ~ rcs(SVI_decile_num, 4), data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)

# Generate new data for prediction
new_data <- data.frame(SVI_decile_num = seq(min(df_cand_kipa_w_scores$SVI_decile_num, na.rm = TRUE),
                                            max(df_cand_kipa_w_scores$SVI_decile_num, na.rm = TRUE),
                                            length.out = 100))

# Predict the linear predictor
lp <- predict(model, newdata = new_data, type = "lp")

# Predict hazard ratios
hr <- exp(lp)

# Find the hazard ratio at the reference value (e.g., decile = 5)
reference_value <- 5
reference_hr <- hr[new_data$SVI_decile_num == reference_value]

# Adjust hazard ratios so that the reference value has an HR of 1
hr_adjusted <- hr / reference_hr

# Create the data frame for plotting
plot_data <- data.frame(
  SVI_decile_num = new_data$SVI_decile_num,
  Hazard_Ratio = hr_adjusted
)

# Plot
ggplot(plot_data, aes(x = SVI_decile_num, y = Hazard_Ratio)) +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  labs(title = "Hazard Ratio by SVI Decile",
       x = "SVI Decile Number",
       y = "Hazard Ratio for Death/Deterioration (Reference = 5)") +
  theme_minimal()
```
##SVI transplant hazard ratio by decile
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)

# Convert decile column to numeric
df_cand_kipa_w_scores$SVI_decile_num <- as.numeric(df_cand_kipa_w_scores$SVI_decile)

# Ensure the datadist is set up for the model
dd <- datadist(df_cand_kipa_w_scores)
options(datadist = "dd")

# Fit the Cox model with restricted cubic splines
model <- cph(Surv(time, transplant_outcome) ~ rcs(SVI_decile_num, 4), data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)

# Generate new data for prediction
new_data <- data.frame(SVI_decile_num = seq(min(df_cand_kipa_w_scores$SVI_decile_num, na.rm = TRUE),
                                            max(df_cand_kipa_w_scores$SVI_decile_num, na.rm = TRUE),
                                            length.out = 100))

# Predict the linear predictor
lp <- predict(model, newdata = new_data, type = "lp")

# Predict hazard ratios
hr <- exp(lp)

# Find the hazard ratio at the reference value (e.g., decile = 5)
reference_value <- 5
reference_hr <- hr[new_data$SVI_decile_num == reference_value]

# Adjust hazard ratios so that the reference value has an HR of 1
hr_adjusted <- hr / reference_hr

# Create the data frame for plotting
plot_data <- data.frame(
  SVI_decile_num = new_data$SVI_decile_num,
  Hazard_Ratio = hr_adjusted
)

# Plot
ggplot(plot_data, aes(x = SVI_decile_num, y = Hazard_Ratio)) +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  labs(title = "Hazard Ratio of Transplant by SVI Decile",
       x = "SVI Decile Number",
       y = "Hazard Ratio of Transplant (Reference = 5)") +
  theme_minimal()
```
##DCI death/deterioration hazard ratio by decile
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)

# Convert decile column to numeric
df_cand_kipa_w_scores$DCI_decile_num <- as.numeric(df_cand_kipa_w_scores$DCI_decile)

# Ensure the datadist is set up for the model
dd <- datadist(df_cand_kipa_w_scores)
options(datadist = "dd")

# Fit the Cox model with restricted cubic splines
model <- cph(Surv(time, death_outcome) ~ rcs(DCI_decile_num, 4), data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)

# Generate new data for prediction
new_data <- data.frame(DCI_decile_num = seq(min(df_cand_kipa_w_scores$DCI_decile_num, na.rm = TRUE),
                                            max(df_cand_kipa_w_scores$DCI_decile_num, na.rm = TRUE),
                                            length.out = 100))

# Predict the linear predictor
lp <- predict(model, newdata = new_data, type = "lp")

# Predict hazard ratios
hr <- exp(lp)

# Find the hazard ratio at the reference value (e.g., decile = 5)
reference_value <- 5
reference_hr <- hr[new_data$DCI_decile_num == reference_value]

# Adjust hazard ratios so that the reference value has an HR of 1
hr_adjusted <- hr / reference_hr

# Create the data frame for plotting
plot_data <- data.frame(
  DCI_decile_num = new_data$DCI_decile_num,
  Hazard_Ratio = hr_adjusted
)

# Plot
ggplot(plot_data, aes(x = DCI_decile_num, y = Hazard_Ratio)) +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  labs(title = "Hazard Ratio by DCI Decile",
       x = "DCI Decile Number",
       y = "Hazard Ratio of Death/Deterioration (Reference = 5)") +
  theme_minimal()
```
##DCI transplant hazard ratio by decile
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)

# Convert decile column to numeric
df_cand_kipa_w_scores$DCI_decile_num <- as.numeric(df_cand_kipa_w_scores$DCI_decile)

# Ensure the datadist is set up for the model
dd <- datadist(df_cand_kipa_w_scores)
options(datadist = "dd")

# Fit the Cox model with restricted cubic splines
model <- cph(Surv(time, transplant_outcome) ~ rcs(DCI_decile_num, 4), data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)

# Generate new data for prediction
new_data <- data.frame(DCI_decile_num = seq(min(df_cand_kipa_w_scores$DCI_decile_num, na.rm = TRUE),
                                            max(df_cand_kipa_w_scores$DCI_decile_num, na.rm = TRUE),
                                            length.out = 100))

# Predict the linear predictor
lp <- predict(model, newdata = new_data, type = "lp")

# Predict hazard ratios
hr <- exp(lp)

# Find the hazard ratio at the reference value (e.g., decile = 5)
reference_value <- 5
reference_hr <- hr[new_data$DCI_decile_num == reference_value]

# Adjust hazard ratios so that the reference value has an HR of 1
hr_adjusted <- hr / reference_hr

# Create the data frame for plotting
plot_data <- data.frame(
  DCI_decile_num = new_data$DCI_decile_num,
  Hazard_Ratio = hr_adjusted
)

# Plot
ggplot(plot_data, aes(x = DCI_decile_num, y = Hazard_Ratio)) +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  labs(title = "Hazard Ratio by DCI Decile",
       x = "DCI Decile Number",
       y = "Hazard Ratio (Reference = 5)") +
  theme_minimal()
```

```{r}
library(ggplot2)
library(patchwork)

```

##plot including all 4 indices - death/deterioration
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)
library(dplyr)

# Define a function to generate hazard ratio data for different deciles
generate_plot_data <- function(decile_col, reference_value = 5) {
  # Convert decile column to numeric
  df_cand_kipa_w_scores[[paste0(decile_col, "_num")]] <- as.numeric(df_cand_kipa_w_scores[[decile_col]])

  # Ensure the datadist is set up for the model
  dd <- datadist(df_cand_kipa_w_scores)
  options(datadist = "dd")

  # Fit the Cox model with restricted cubic splines
  formula <- as.formula(paste("Surv(time, death_outcome) ~ rcs(", paste0(decile_col, "_num"), ", 4)"))
  model <- cph(formula, data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)

  # Generate new data for prediction
  new_data <- data.frame(
    Decile = seq(min(df_cand_kipa_w_scores[[paste0(decile_col, "_num")]], na.rm = TRUE),
                 max(df_cand_kipa_w_scores[[paste0(decile_col, "_num")]], na.rm = TRUE),
                 length.out = 100)
  )
  names(new_data) <- paste0(decile_col, "_num")

  # Predict the linear predictor
  lp <- predict(model, newdata = new_data, type = "lp")

  # Predict hazard ratios
  hr <- exp(lp)

  # Find the hazard ratio at the reference value (e.g., decile = 5)
  reference_hr <- hr[new_data[[paste0(decile_col, "_num")]] == reference_value]

  # Adjust hazard ratios so that the reference value has an HR of 1
  hr_adjusted <- hr / reference_hr

  # Create the data frame for plotting
  plot_data <- data.frame(
    Decile = new_data[[paste0(decile_col, "_num")]],
    Hazard_Ratio = hr_adjusted,
    Variable = decile_col  # Add a column for the variable name
  )
  
  return(plot_data)
}

# Generate plot data for each decile
plot_data_ADI <- generate_plot_data("ADI_decile")
plot_data_SVM <- generate_plot_data("SVM_decile")
plot_data_SVI <- generate_plot_data("SVI_decile")
plot_data_DCI <- generate_plot_data("DCI_decile")

# Combine all plot data into one data frame
combined_plot_data <- bind_rows(plot_data_ADI, plot_data_SVM, plot_data_SVI, plot_data_DCI)

# Plot all lines on the same graph with x-axis intervals of 1
ggplot(combined_plot_data, aes(x = Decile, y = Hazard_Ratio, color = Variable)) +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  scale_x_continuous(breaks = seq(min(combined_plot_data$Decile, na.rm = TRUE),
                                  max(combined_plot_data$Decile, na.rm = TRUE),
                                  by = 1)) +  # Set x-axis breaks to intervals of 1
  labs(title = "Hazard Ratio by Decile for Various Metrics",
       x = "Decile Number",
       y = "Hazard Ratio of Death/Deterioration(Reference = 5)",
       color = "Variable") +
  theme_minimal()

```
```{r}
# Convert decile columns to numeric
df_cand_kipa_w_scores$ADI_decile_num <- as.numeric(df_cand_kipa_w_scores$ADI_decile)
df_cand_kipa_w_scores$SVM_decile_num <- as.numeric(df_cand_kipa_w_scores$SVM_decile)
df_cand_kipa_w_scores$SVI_decile_num <- as.numeric(df_cand_kipa_w_scores$SVI_decile)
df_cand_kipa_w_scores$DCI_decile_num <- as.numeric(df_cand_kipa_w_scores$DCI_decile)
```

```{r}
# Define the formula for the model
test_formula <- as.formula("Surv(time, death_outcome) ~ rcs(ADI_decile_num, 4)")

# Fit the Cox model
test_model <- cph(test_formula, data = df_cand_kipa_w_scores, x = TRUE, y = TRUE)

# Print model summary
summary(test_model)

```
##all 4 indices - death/deterioration - with confidence intervals
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)
library(dplyr)

# Define a function to generate hazard ratio data for different deciles, including confidence intervals
generate_plot_data <- function(decile_col, reference_value = 5) {
  # Convert decile column to numeric
  df_cand_kipa_w_scores[[paste0(decile_col, "_num")]] <- as.numeric(df_cand_kipa_w_scores[[decile_col]])
  
  # Ensure the datadist is set up for the model
  dd <- datadist(df_cand_kipa_w_scores)
  options(datadist = "dd")
  
  # Fit the Cox model with restricted cubic splines
  formula <- as.formula(paste("Surv(time, death_outcome) ~ rcs(", paste0(decile_col, "_num"), ", 4)"))
  model <- cph(formula, data = df_cand_kipa_w_scores, x = TRUE, y = TRUE, surv = TRUE)
  
  # Generate new data for prediction
  new_data <- data.frame(
    Decile = seq(min(df_cand_kipa_w_scores[[paste0(decile_col, "_num")]], na.rm = TRUE),
                 max(df_cand_kipa_w_scores[[paste0(decile_col, "_num")]], na.rm = TRUE),
                 length.out = 100)
  )
  names(new_data) <- paste0(decile_col, "_num")
  
  # Predict the linear predictor and standard error
  pred <- predict(model, newdata = new_data, type = "lp", se = TRUE)
  
  # Inspect the structure of the prediction object
  print("Prediction object structure:")
  print(str(pred))
  
  # Extract linear predictors and standard errors
  lp <- pred$linear.predictors
  se <- pred$se.fit
  
  # Check if lp and se are numeric
  if (is.null(lp)) stop("Linear predictor is NULL.")
  if (is.null(se)) stop("Standard error is NULL.")
  
  # Convert to numeric if necessary
  lp <- as.numeric(lp)
  se <- as.numeric(se)
  
  # Calculate hazard ratios and confidence intervals
  hr <- exp(lp)
  hr_ci_lower <- exp(lp - 1.96 * se)
  hr_ci_upper <- exp(lp + 1.96 * se)
  
  # Find the hazard ratio at the reference value (e.g., decile = 5)
  reference_hr <- hr[new_data[[paste0(decile_col, "_num")]] == reference_value]
  
  # Adjust hazard ratios so that the reference value has an HR of 1
  hr_adjusted <- hr / reference_hr
  hr_ci_lower_adjusted <- hr_ci_lower / reference_hr
  hr_ci_upper_adjusted <- hr_ci_upper / reference_hr
  
  # Create the data frame for plotting
  plot_data <- data.frame(
    Decile = new_data[[paste0(decile_col, "_num")]],
    Hazard_Ratio = hr_adjusted,
    HR_CI_Lower = hr_ci_lower_adjusted,
    HR_CI_Upper = hr_ci_upper_adjusted,
    Variable = decile_col  # Add a column for the variable name
  )
  
  return(plot_data)
}

# Generate plot data for each decile
plot_data_ADI <- generate_plot_data("ADI_decile")
plot_data_SVM <- generate_plot_data("SVM_decile")
plot_data_SVI <- generate_plot_data("SVI_decile")
plot_data_DCI <- generate_plot_data("DCI_decile")

# Combine all plot data into one data frame
combined_plot_data <- bind_rows(plot_data_ADI, plot_data_SVM, plot_data_SVI, plot_data_DCI)

# Plot all lines on the same graph with x-axis intervals of 1 and confidence intervals
ggplot(combined_plot_data, aes(x = Decile, y = Hazard_Ratio, color = Variable)) +
  geom_line() +
  geom_ribbon(aes(ymin = HR_CI_Lower, ymax = HR_CI_Upper, fill = Variable), alpha = 0.2) +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  scale_x_continuous(breaks = seq(min(combined_plot_data$Decile, na.rm = TRUE),
                                  max(combined_plot_data$Decile, na.rm = TRUE),
                                  by = 1)) +  # Set x-axis breaks to intervals of 1
  labs(title = "Hazard Ratio by Decile for Various Metrics",
       x = "Decile Number",
       y = "Hazard Ratio of Death/Deterioration (Reference = 5)",
       color = "Variable",
       fill = "Variable") +
  theme_minimal()

```
##all 4 - transplant - with confidence intervals
```{r}
# Load necessary libraries
library(rms)
library(ggplot2)
library(dplyr)

# Define a function to generate hazard ratio data for different deciles, including confidence intervals
generate_plot_data <- function(decile_col, reference_value = 5) {
  # Convert decile column to numeric
  df_cand_kipa_w_scores[[paste0(decile_col, "_num")]] <- as.numeric(df_cand_kipa_w_scores[[decile_col]])
  
  # Ensure the datadist is set up for the model
  dd <- datadist(df_cand_kipa_w_scores)
  options(datadist = "dd")
  
  # Fit the Cox model with restricted cubic splines
  formula <- as.formula(paste("Surv(time, transplant_outcome) ~ rcs(", paste0(decile_col, "_num"), ", 4)"))
  model <- cph(formula, data = df_cand_kipa_w_scores, x = TRUE, y = TRUE, surv = TRUE)
  
  # Generate new data for prediction
  new_data <- data.frame(
    Decile = seq(min(df_cand_kipa_w_scores[[paste0(decile_col, "_num")]], na.rm = TRUE),
                 max(df_cand_kipa_w_scores[[paste0(decile_col, "_num")]], na.rm = TRUE),
                 length.out = 100)
  )
  names(new_data) <- paste0(decile_col, "_num")
  
  # Predict the linear predictor and standard error
  pred <- predict(model, newdata = new_data, type = "lp", se = TRUE)
  
  # Inspect the structure of the prediction object
  print("Prediction object structure:")
  print(str(pred))
  
  # Extract linear predictors and standard errors
  lp <- pred$linear.predictors
  se <- pred$se.fit
  
  # Check if lp and se are numeric
  if (is.null(lp)) stop("Linear predictor is NULL.")
  if (is.null(se)) stop("Standard error is NULL.")
  
  # Convert to numeric if necessary
  lp <- as.numeric(lp)
  se <- as.numeric(se)
  
  # Calculate hazard ratios and confidence intervals
  hr <- exp(lp)
  hr_ci_lower <- exp(lp - 1.96 * se)
  hr_ci_upper <- exp(lp + 1.96 * se)
  
  # Find the hazard ratio at the reference value (e.g., decile = 5)
  reference_hr <- hr[new_data[[paste0(decile_col, "_num")]] == reference_value]
  
  # Adjust hazard ratios so that the reference value has an HR of 1
  hr_adjusted <- hr / reference_hr
  hr_ci_lower_adjusted <- hr_ci_lower / reference_hr
  hr_ci_upper_adjusted <- hr_ci_upper / reference_hr
  
  # Create the data frame for plotting
  plot_data <- data.frame(
    Decile = new_data[[paste0(decile_col, "_num")]],
    Hazard_Ratio = hr_adjusted,
    HR_CI_Lower = hr_ci_lower_adjusted,
    HR_CI_Upper = hr_ci_upper_adjusted,
    Variable = decile_col  # Add a column for the variable name
  )
  
  return(plot_data)
}

# Generate plot data for each decile
plot_data_ADI <- generate_plot_data("ADI_decile")
plot_data_SVM <- generate_plot_data("SVM_decile")
plot_data_SVI <- generate_plot_data("SVI_decile")
plot_data_DCI <- generate_plot_data("DCI_decile")

# Combine all plot data into one data frame
combined_plot_data <- bind_rows(plot_data_ADI, plot_data_SVM, plot_data_SVI, plot_data_DCI)

# Plot all lines on the same graph with x-axis intervals of 1 and confidence intervals
ggplot(combined_plot_data, aes(x = Decile, y = Hazard_Ratio, color = Variable)) +
  geom_line() +
  geom_ribbon(aes(ymin = HR_CI_Lower, ymax = HR_CI_Upper, fill = Variable), alpha = 0.2) +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +  # Add a reference line at HR = 1
  scale_x_continuous(breaks = seq(min(combined_plot_data$Decile, na.rm = TRUE),
                                  max(combined_plot_data$Decile, na.rm = TRUE),
                                  by = 1)) +  # Set x-axis breaks to intervals of 1
  labs(title = "Hazard Ratio by Decile for Various Metrics",
       x = "Decile Number",
       y = "Hazard Ratio of Transplant (Reference = 5)",
       color = "Variable",
       fill = "Variable") +
  theme_minimal()

```

